{"id":"node_modules/string-hash/index.js","dependencies":[{"name":"/Volumes/Macintosh HD/Assignment/challenge-1/package.json","includedInParent":true,"mtime":1545398332554},{"name":"/Volumes/Macintosh HD/Assignment/challenge-1/.babelrc","includedInParent":true,"mtime":1545320343969},{"name":"/Volumes/Macintosh HD/Assignment/challenge-1/node_modules/string-hash/package.json","includedInParent":true,"mtime":1545320338604}],"generated":{"js":"\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n","map":{"mappings":[{"source":"node_modules/string-hash/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/string-hash/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}}],"sources":{"node_modules/string-hash/index.js":"\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n"},"lineCount":18}},"hash":"483cd2c7f17dc22f6f4deaad84342de7","cacheData":{"env":{}}}